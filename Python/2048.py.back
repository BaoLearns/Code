['#!/usr/bin/env python\n', '# coding=utf-8\n', '#********************************************************\n', '# > OS     : Linux 3.2.0-60-generic #91-Ubuntu\n', '#\t> Author : yaolong\n', '#\t> Mail   : dengyaolong@yeah.net\n', '#\t> Time   : 2014\xe5\xb9\xb406\xe6\x9c\x8801\xe6\x97\xa5 \xe6\x98\x9f\xe6\x9c\x9f\xe6\x97\xa5 13:13:39\n', '#********************************************************\n', 'import random\n', 'import copy\n', '\n', 'def display(mtrx): #output function\n', '    a = ("\xe2\x94\x8c", "\xe2\x94\x9c", "\xe2\x94\x9c", "\xe2\x94\x9c", "\xe2\x94\x94")\n', '    b = ("\xe2\x94\xac", "\xe2\x94\xbc", "\xe2\x94\xbc", "\xe2\x94\xbc", "\xe2\x94\xb4")\n', '    c = ("\xe2\x94\x90", "\xe2\x94\xa4", "\xe2\x94\xa4", "\xe2\x94\xa4", "\xe2\x94\x98")\n', '    for i in range(4):\n', '        print a[i] + ("\xe2\x94\x80" * 5 + b[i]) * 3 + ("\xe2\x94\x80" * 5 + c[i])\n', '        for j in range(4):\n', '            print "\xe2\x94\x82%4s" % (mtrx[i][j] if mtrx[i][j] else \' \'),\n', '        print "\xe2\x94\x82"\n', '    print a[4] + ("\xe2\x94\x80" * 5 + b[4]) * 3 + ("\xe2\x94\x80" * 5 + c[4])\n', '\n', 'def init(): #initial of matrix\n', '    mtr = [[0 for i in range(4)] for j in range(4)]  \n', '    ran_pos = random.sample(range(16), 2)\n', '    mtr[ran_pos[0]/4][ran_pos[0]%4] = mtr[ran_pos[1]/4][ran_pos[1]%4] = 2\n', '    return mtr\n', '\n', 'def go_on(mtr, score):#check for the game is over ?\n', '    if 2048 in mtr: #2048 and win \n', '        print "Great!You win!Your score is ", score\n', '        raw_input("Press any key to continue...")\n', '        exit()\n', '    if 0 in mtr: #can insert number\xef\xbc\x81\n', '        return True\n', '    for i in range(4): \n', '        for j in range(4):   #can merge number!\n', '            if i < 3 and mtr[i][j] == mtr[i + 1][j]:\n', '                return True\n', '            if j < 3 and mtr[i][j] == mtr[i][j + 1]:\n', '                return True\n', '    print "Gameover!"\n', '    return False\n', '\n', 'def move(mtr, dirct):#the core code!move by the four direction\n', '    score = 0\n', '    visit = []\n', '    if dirct == 0:  # left\n', '        for i in range(4):\n', '            for j in range(1, 4):\n', '                for k in range(j,0,-1):\n', '                    if mtr[i][k - 1] == 0 :\n', '                        mtr[i][k - 1] = mtr[i][k]\n', '                        mtr[i][k] = 0\n', '                    elif mtr[i][k - 1] == mtr[i][k] and 4 * i + k - 1 not in visit and 4 * i + k not in visit:\n', '                        mtr[i][k - 1] *= 2\n', '                        mtr[i][k] = 0\n', '                        score += mtr[i][k - 1]\n', '                        visit.append(4 * i + k)\n', '                        visit.append(4 * i + k - 1)\n', '    elif dirct == 1:  # down\n', '        for j in range(4):\n', '            for i in range(3, 0, -1):\n', '                for k in range(0,i):\n', '                   if mtr[k+1][j] == 0:\n', '                      mtr[k+1][j] = mtr[k][j]\n', '                      mtr[k][j]=0\n', '                   elif mtr[k+1][j]==mtr[k][j] and (4 *(k+1)+j) not in visit and (4*k+j) not in visit:\n', '                      mtr[k+1][j]*=2\n', '                      mtr[k][j]=0\n', '                      score=mtr[k+1][j]\n', '                      visit.append(4*(k)+j)\n', '                      visit.append(4*(k+1)+j)\n', '    elif dirct == 2:  # up\n', '        for j in range(4):\n', '            for i in range(1,4):\n', '                for k in range(i,0,-1):\n', '                    if mtr[k-1][j]==0:\n', '                        mtr[k-1][j]=mtr[k][j]\n', '                        mtr[k][j]=0\n', '                    elif mtr[k-1][j]==mtr[k][j] and (4 *(k-1)+j) not in visit and (4*k+j) not in visit:\n', '                        mtr[k-1][j]*=2\n', '                        mtr[k][j]=0\n', '                        score += mtr[k-1][j]\n', '                        visit.append(4*(k)+j)\n', '                        visit.append(4*(k-1)+j)\n', '    elif dirct == 3:  # right\n', '        for i in range(4):\n', '            for j in range(3, 0, -1):\n', '                for k in range(j):\n', '                   if mtr[i][k+1]  == 0:\n', '                      mtr[i][k+1] = mtr[i][k]\n', '                      mtr[i][k]=0\n', '                   elif mtr[i][k] ==mtr[i][k+1] and 4 * i + k + 1 not in visit and 4 * i + k not in visit:\n', '                      mtr[i][k+1]*=2\n', '                      mtr[i][k]=0\n', '                      score+=mtr[i][k+1]\n', '                      visit.append(4*i+k+1)\n', '                      visit.append(4*i+k)\n', '    return score\n', '\n', 'def update(mtr):\n', '    ran_pos=[]\n', '    ran_num=[2,4]\n', '    for i in range(4):\n', '        for j in range(4):\n', '            if mtr[i][j]==0:\n', '               ran_pos.append(4*i+j)\n', '    if len(ran_pos)>0:# can insert\n', '        k=random.choice(ran_pos)\n', '        n=random.choice(ran_num)\n', '        mtr[k/4][k%4]=n\n', '\n', 'declare = "\xe2\x86\x90\xef\xbc\x9aa/h  \xe2\x86\x93: s/j \xe2\x86\x91: w/k \xe2\x86\x92: d/l ,q(uit),b(ack)"\n', 'illegal = "Illegal operation!"\n', 'noefficient = "This move has no efficient"\n', 'score = 0\n', 'step = 0\n', 'mtr = init()  # init the matrix\n', 'mtr_stk = []  # use step for back\n', 'scr_stk = []\n', 'tmp = copy.deepcopy(mtr)\n', 'mtr_stk.append(tmp) #push the init matrix ensure the stack is not empty\n', 'scr_stk.append(0)\n', 'display(mtr)\n', "if __name__ == '__main__':\n", '    while go_on(mtr, score):\n', '        dirct = raw_input("Step :%d Score :%d (%s):" % (step, score, declare))\n', '        dirct = dirct.lower()#ensure the direction operation is lower\n', '        # map 0 left,1 down,2 up ,3 right\n', '        if dirct == "q":  #quit\n', '            break\n', '        elif dirct == "a" or dirct == "h":#normal mode and the vim mode\n', '            dirct = 0\n', '        elif dirct == "s" or dirct == "j":\n', '            dirct = 1\n', '        elif dirct == "w" or dirct == "k":\n', '            dirct = 2\n', '        elif dirct == "d" or dirct == "l":\n', '            dirct = 3\n', '        elif dirct == "b":\n', '            if len(mtr_stk) == 1: #step one\n', '                print "Can\'t Back.."\n', '            else:\n', '                mtr_stk.pop()   #pop up \n', '                scr_stk.pop()   \n', '                step -= 1       #step back\n', '                mtr = copy.deepcopy(mtr_stk[-1]) #matrix back\n', '                score = scr_stk[-1]\n', '            continue        #no move\n', '        else:\n', '            print illegal    #not in the operation set\n', '            continue         #has no move\n', '        tmp = copy.deepcopy(mtr)   #use to compare the move is efficient ?\n', '        op_scr = move(mtr, dirct)\n', '        if tmp != mtr:\n', '            score = score + op_scr  #the move gains\n', '            update(mtr) #insert a number values of 2 or 4\n', '            tmp = copy.deepcopy(mtr)  #need to deep copy..\n', '            mtr_stk.append(tmp)  # use to back\n', '            scr_stk.append(int(score))  \n', '            step +=1  #step++\n', '            display(mtr)  #output the matrix\n', '        else:\n', '            print noefficient\n', 'print "Your score is :",score\n']