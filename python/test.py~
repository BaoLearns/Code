#_*_coding:utf-8_*_
'''d = {0:'零', 1:'壹', 2:'贰', 3:'叁', 4:'肆', 5:'伍', 6:'陆', 7:'柒', 8:'捌',9:'玖',10:'拾', 100:'佰',1000:'仟', 10000:'万'}
a = int(raw_input())
ans = ['圆']
v = 1
f = False
if a < 0:
    f = True
while a > 0:
    if v >= 10 and a % 10 != 0:
        ans.append(d[v])
    if a % 10 == 0:
        if ans[len(ans) - 1] == d[0]:
            pass
        else:
            ans.append(d[0])
    else:
        ans.append(d[a % 10])
    a /= 10
    v *= 10
    if(v == 10000):
        ans.append('万')
        v = 1
if f:
    ans.append('负')
print ''.join([str(c) for c in ans.__reversed__()])
'''

from Queue import Queue

def bfs(n, m):
    n += 1
    m += 1
    maze = [([-1] * n) for i in xrange(m)]
    print len(maze)
    direction = [-2, 1, -1, 2, 1, 2, 2, 1, 2, -1, 1, -2, -1, -2, -2, -1]
    que = Queue()
    que.put(n - 1)
    que.put(0)
    maze[n - 1][0] = 0
for i in xrange(len(maze)):
...     for j in xrange(len(maze[i])):
...             print maze[i][j],
...     print ''

    while False == que.empty():
        x = que.get()
        y = que.get()
        print 'FUCK AGAIN',x, y
        if x == 0 and y == m - 1:
            return maze[x][y]
        for i in xrange(0, 8, 2):
            dx = x + direction[i]
            dy = y + direction[i + 1]
            if dx >= 0 and dx < n and dy >= 0 and dy < m and -1 == maze[dx][dy]:
                maze[dx][dy] = maze[x][y] + 1
                que.put(dx)
                que.put(dy)
    return -1

n, m = map(int, raw_input().split())
print bfs(n, m)
