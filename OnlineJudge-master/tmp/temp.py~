class Daemon:
    from os import cpu_count
    DAEMON_MAX=cpu_count()
    __initialled=None
    __queue=None

    @classmethod
    def __daemon(cls):
        while True:
            if cls.__queue==None:
                cls.__daemon_num-=1
                break
            self=cls.__queue.get();
            if self is None:
                cls.__daemon_num-=1
                cls.__queue.task_done()
                break
            if not self.__cancel:
                self._run()
            self.__ev.set()
            cls.__queue.task_done()

    @classmethod
    def init(cls):
        if cls.__initialled:
            return
        cls.__queue=Queue()
        for i in range(cls.DAEMON_MAX):
            th=Thread(target=cls.__daemon,name=cls.__name__)
            th.daemon=True
            th.start()
        cls.__daemon_num=cls.DAEMON_MAX
        cls.__initialled=True

    @classmethod
    def exit(cls):
        if not cls.__initialled:
            return
        for i in range(cls.__daemon_num):
            cls.__queue.put(None)
        cls.__queue.join()
        cls.__queue=None
        cls.__initialled=False

    def __init__(self):
        self.__ev=Event()
        self.__add()
        self.__cancel=False

    def __add(self):
        if self.__queue:
            self.__queue.put(self)
        else:
            pass #may raise an exception,but which?

    def _run(self):
        raise NotImplementedError()

    def wait(self):
        self.__ev.wait()

    def cancel(self):
        self.__cancel=True


class Tester(Daemon):
    OUTPUT_MAX=1000

    class Limiter:
        def __init__(self,cpu,mem):
            self.cpu=cpu
            self.mem=mem
        def __call__(self):
            import resource as res
            res.setrlimit(res.RLIMIT_CORE,(0,0))
            res.setrlimit(res.RLIMIT_MEMLOCK,(0,0))
            res.setrlimit(res.RLIMIT_MSGQUEUE,(0,0))
            res.setrlimit(res.RLIMIT_NPROC,(0,0))
            res.setrlimit(res.RLIMIT_FSIZE,(Tester.OUTPUT_MAX,Tester.OUTPUT_MAX))
            res.setrlimit(res.RLIMIT_CPU,(self.cpu,self.cpu))
            res.setrlimit(res.RLIMIT_AS,(self.mem,self.mem))

            ##os.chroot(CHROOT_PATH)
            os.nice(10)

    def c(self):
        ofile=TemporaryFile('w+t')
        if self.ua:
            bin=ANSWER_PATH+self.id+'/c'+self.id
        else:
            bin=BINARY_PATH+self.id+'/c'+self.id
        p=Popen(bin,stdin=self.ifile,stdout=ofile,universal_newlines=True,
                preexec_fn=Tester.Limiter(self.lcpu,self.lmem),stderr=DEVNULL)
        p.wait()

        self.result=0
        if p.returncode==-9:
            self.result=-5
        elif p.returncode==-11:
            self.result=-6
        elif p.returncode==-25:
            self.result=-4
        elif p.returncode<0:
            self.result=-3
        else:
            ofile.seek(0)
            if self.output!=ofile.read(-1):
                self.result=-7
    def cxx(self):
        ofile=TemporaryFile('w+t')
        if self.ua:
            bin=ANSWER_PATH+self.id+'/x'+self.id
        else:
            bin=BINARY_PATH+self.id+'/x'+self.id
        p=Popen(bin,stdin=self.ifile,stdout=ofile,universal_newlines=True,
                preexec_fn=Tester.Limiter(self.lcpu,self.lmem),stderr=DEVNULL)
        p.wait()

        self.result=0
        if p.returncode==-9:
            self.result=-5
        elif p.returncode==-11:
            self.result=-6
        elif p.returncode==-25:
            self.result=-4
        elif p.returncode<0:
            self.result=-3
        else:
            ofile.seek(0)
            if self.output!=ofile.read(-1):
                self.result=-7


    def java(self):
        ofile=TemporaryFile('w+t')
        if self.ua:
            dst=ANSWER_PATH+self.id
        else:
            dst=BINARY_PATH+self.id
        cmd=['java','-cp',dst,'Main']
        p=Popen(cmd,stdin=self.ifile,stdout=ofile,universal_newlines=True,
                preexec_fn=Tester.Limiter(self.lcpu,self.lmem),stderr=DEVNULL)
        p.wait()

        self.result=0
        if p.returncode==-9:
            self.result=-5
        elif p.returncode==-11:
            self.result=-6
        elif p.returncode==-25:
            self.result=-4
        elif p.returncode<0:
            self.result=-3
        else:
            ofile.seek(0)
            if self.output!=ofile.read(-1):
                self.result=-7
    
    def pyc(self):
        ofile=TemporaryFile('w+t')
        if self.ua:
            dst=ANSWER_PATH+self.id+'.pyc'
        else:
            dst=BINARY_PATH+self.id+'.pyc'
        cmd=['python',dst]
        p=Popen(cmd,stdin=self.ifile,stdout=ofile,universal_newlines=True,
                preexec_fn=Tester.Limiter(self.lcpu,self.lmem),stderr=DEVNULL)
        p.wait()

        self.result=0
        if p.returncode==-9:
            self.result=-5
        elif p.returncode==-11:
            self.result=-6
        elif p.returncode==-25:
            self.result=-4
        elif p.returncode<0:
            self.result=-3
        else:
            ofile.seek(0)
            if self.output!=ofile.read(-1):
                self.result=-7
        
        pass

    testers=[
            None,
            c,
            cxx,
            java,
            pyc,
            ]

    def __init__(self,id,lang,input,output,cpu,mem,use_answer=False):
        self.id=str(id)
        self.lang=int(lang)
        self.ifile=TemporaryFile(mode='w+t')
        self.ifile.write(input)
        self.ifile.seek(0)
        self.output=str(output)
        self.lcpu=cpu
        self.lmem=mem
        self.ua=use_answer
        Daemon.__init__(self)

    def _run(self):
        fun=self.testers[self.lang]
        fun(self)

Tester.init()

